import EditableField from "./EditableField";
import Event from "./Event";
import { MonacoEditor } from "./MonacoEditor";
import ValidationRuleSet from "./Validation";
import IValidationRule from "./IValidationRule";
import ValidationResult from "./ValidationResult";
export default abstract class Excercise<RuleType extends IValidationRule, RuleSetType extends ValidationRuleSet<RuleType>> {
    protected _editableFields: EditableField[];
    protected abstract readonly _ruleSets: RuleSetType[];
    protected readonly _monacoEditorInstance: MonacoEditor;
    constructor(monacoEditorElement: HTMLElement, content?: string);
    abstract addValidationRule(): RuleSetType;
    protected abstract validateRule(rule: RuleType): Promise<boolean> | boolean;
    readonly onValidate: Event<ValidationResult>;
    get content(): string;
    setEditableFields(fields: EditableField[]): void;
    clearEditableFields(): void;
    validate(): Promise<ValidationResult>;
    /**
     * Override this method to add custom validation
     */
    protected abstract validateExtend(): Promise<ValidationResult>;
    private editableFieldsChanged;
}
